{"version":3,"file":"/Users/mwistrand/projects/dojo/widgets/src/progress/index.ts","sourceRoot":"","sources":["../node_modules/tslint-loader/index.js??ref--4!/Users/mwistrand/projects/dojo/widgets/node_modules/@dojo/webpack-contrib/css-module-dts-loader/index.js?type=ts&instanceName=0_custom-elements!/Users/mwistrand/projects/dojo/widgets/src/progress/index.ts"],"names":[],"mappings":";AAAA,OAAO,EAAE,UAAU,EAAE,MAAM,wCAAwC,CAAC;AACpE,OAAO,EAAE,WAAW,EAAoB,KAAK,EAAE,MAAM,2CAA2C,CAAC;AACjG,OAAO,EAAE,CAAC,EAAE,MAAM,+BAA+B,CAAC;AAElD,OAAO,EAAE,oBAAoB,EAAE,MAAM,gBAAgB,CAAC;AAEtD,OAAO,KAAK,GAAG,MAAM,yBAAyB,CAAC;AAC/C,OAAO,EAAE,aAAa,EAAE,MAAM,sDAAsD,CAAC;AAwCrF,IAAa,QAAQ,GAArB,cAAsB,SAAQ,WAAW,CAAC,UAAU,CAAqB;IAChE,OAAO,CAAC,KAAa,EAAE,OAAe;QAC7C,MAAM,EAAE,MAAM,EAAE,GAAG,IAAI,CAAC,UAAU,CAAC;QACnC,MAAM,CAAC,MAAM,CAAC,CAAC,CAAC,MAAM,CAAC,KAAK,EAAE,OAAO,CAAC,CAAC,CAAC,CAAC,GAAG,OAAO,GAAG,CAAC;IACxD,CAAC;IAES,cAAc,CAAC,OAAe;QACvC,MAAM,CAAC;YACN,CAAC,CAAC,KAAK,EAAE;gBACR,OAAO,EAAE,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,QAAQ,CAAC;gBACjC,MAAM,EAAE;oBACP,KAAK,EAAE,GAAG,OAAO,GAAG;iBACpB;aACD,CAAC;SACF,CAAC;IACH,CAAC;IAES,MAAM;QACf,MAAM,EACL,IAAI,GAAG,EAAE,EACT,KAAK,EACL,UAAU,GAAG,IAAI,EACjB,GAAG,GAAG,GAAG,EACT,GAAG,GAAG,CAAC,EACP,QAAQ,EACR,GAAG,IAAI,CAAC,UAAU,CAAC;QAEpB,MAAM,OAAO,GAAG,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,KAAK,GAAG,GAAG,CAAC,GAAG,CAAC,GAAG,GAAG,GAAG,CAAC,CAAC,GAAG,GAAG,CAAC,CAAC;QAChE,MAAM,MAAM,GAAG,IAAI,CAAC,OAAO,CAAC,KAAK,EAAE,OAAO,CAAC,CAAC;QAE5C,MAAM,CAAC,CAAC,CAAC,KAAK,EAAE,EAAE,OAAO,EAAE,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,IAAI,CAAC,EAAE,EAAE;YAClD,CAAC,CACA,KAAK,oBAED,oBAAoB,CAAC,IAAI,CAAC,IAC7B,OAAO,EAAE,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,GAAG,CAAC,EAC5B,IAAI,EAAE,aAAa,EACnB,eAAe,EAAE,GAAG,GAAG,EAAE,EACzB,eAAe,EAAE,GAAG,GAAG,EAAE,EACzB,eAAe,EAAE,GAAG,KAAK,EAAE,EAC3B,gBAAgB,EAAE,MAAM,EACxB,EAAE,EAAE,QAAQ,KAEb,IAAI,CAAC,cAAc,CAAC,OAAO,CAAC,CAC5B;YACD,UAAU,CAAC,CAAC,CAAC,CAAC,CAAC,MAAM,EAAE,EAAE,OAAO,EAAE,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,MAAM,CAAC,EAAE,EAAE,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI;SAC5E,CAAC,CAAC;IACJ,CAAC;CACD,CAAA;AAhDY,QAAQ;IAjBpB,KAAK,CAAC,GAAG,CAAC;IACV,aAAa,CAAqB;QAClC,GAAG,EAAE,eAAe;QACpB,UAAU,EAAE;YACX,OAAO;YACP,SAAS;YACT,MAAM;YACN,cAAc;YACd,QAAQ;YACR,YAAY;YACZ,KAAK;YACL,KAAK;YACL,OAAO;SACP;QACD,UAAU,EAAE,CAAC,UAAU,CAAC;QACxB,MAAM,EAAE,EAAE;KACV,CAAC;GACW,QAAQ,CAgDpB;SAhDY,QAAQ;AAkDrB,eAAe,QAAQ,CAAC","sourcesContent":["import { WidgetBase } from '@dojo/framework/widget-core/WidgetBase';\nimport { ThemedMixin, ThemedProperties, theme } from '@dojo/framework/widget-core/mixins/Themed';\nimport { v } from '@dojo/framework/widget-core/d';\nimport { CustomAriaProperties } from '../common/interfaces';\nimport { formatAriaProperties } from '../common/util';\nimport { DNode } from '@dojo/framework/widget-core/interfaces';\nimport * as css from '../theme/progress.m.css';\nimport { customElement } from '@dojo/framework/widget-core/decorators/customElement';\n\n/**\n * @type ProgressProperties\n *\n * Properties that can be set on a Progress component\n *\n * @property value          The current value\n * @property output         A function used to determine the output display\n * @property showOutput     Toggles visibility of progess bar output\n * @property max            Value used to calculate percent width\n * @property min            Value used to calculate percent width\n * @property widgetId       Value used to supply a dom id to the element with role=\"progressbar\"\n */\nexport interface ProgressProperties extends ThemedProperties, CustomAriaProperties {\n\tvalue: number;\n\toutput?(value: number, percent: number): string;\n\tshowOutput?: boolean;\n\tmax?: number;\n\tmin?: number;\n\twidgetId?: string;\n}\n\n@theme(css)\n@customElement<ProgressProperties>({\n\ttag: 'dojo-progress',\n\tproperties: [\n\t\t'theme',\n\t\t'classes',\n\t\t'aria',\n\t\t'extraClasses',\n\t\t'output',\n\t\t'showOutput',\n\t\t'max',\n\t\t'min',\n\t\t'value'\n\t],\n\tattributes: ['widgetId'],\n\tevents: []\n})\nexport class Progress extends ThemedMixin(WidgetBase)<ProgressProperties> {\n\tprivate _output(value: number, percent: number) {\n\t\tconst { output } = this.properties;\n\t\treturn output ? output(value, percent) : `${percent}%`;\n\t}\n\n\tprotected renderProgress(percent: number): DNode[] {\n\t\treturn [\n\t\t\tv('div', {\n\t\t\t\tclasses: this.theme(css.progress),\n\t\t\t\tstyles: {\n\t\t\t\t\twidth: `${percent}%`\n\t\t\t\t}\n\t\t\t})\n\t\t];\n\t}\n\n\tprotected render(): DNode {\n\t\tconst {\n\t\t\taria = {},\n\t\t\tvalue,\n\t\t\tshowOutput = true,\n\t\t\tmax = 100,\n\t\t\tmin = 0,\n\t\t\twidgetId\n\t\t} = this.properties;\n\n\t\tconst percent = Math.round(((value - min) / (max - min)) * 100);\n\t\tconst output = this._output(value, percent);\n\n\t\treturn v('div', { classes: this.theme(css.root) }, [\n\t\t\tv(\n\t\t\t\t'div',\n\t\t\t\t{\n\t\t\t\t\t...formatAriaProperties(aria),\n\t\t\t\t\tclasses: this.theme(css.bar),\n\t\t\t\t\trole: 'progressbar',\n\t\t\t\t\t'aria-valuemin': `${min}`,\n\t\t\t\t\t'aria-valuemax': `${max}`,\n\t\t\t\t\t'aria-valuenow': `${value}`,\n\t\t\t\t\t'aria-valuetext': output,\n\t\t\t\t\tid: widgetId\n\t\t\t\t},\n\t\t\t\tthis.renderProgress(percent)\n\t\t\t),\n\t\t\tshowOutput ? v('span', { classes: this.theme(css.output) }, [output]) : null\n\t\t]);\n\t}\n}\n\nexport default Progress;\n"]}